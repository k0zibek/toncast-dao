#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; ToncastDAOepoch_ToncastDAOepoch.headers.fc
;;
;; Header files for ToncastDAOepoch
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_string_builder_start
tuple __tact_string_builder_start(builder b) inline;

;; __tact_string_builder_start_comment
tuple __tact_string_builder_start_comment() inline;

;; __tact_string_builder_start_string
tuple __tact_string_builder_start_string() inline;

;; __tact_string_builder_end
cell __tact_string_builder_end(tuple builders) inline;

;; __tact_string_builder_end_slice
slice __tact_string_builder_end_slice(tuple builders) inline;

;; __tact_string_builder_append
((tuple), ()) __tact_string_builder_append(tuple builders, slice sc) inline_ref;

;; $ToncastDAOepoch$_store
builder $ToncastDAOepoch$_store(builder build_0, (slice, int, int, int, int) v) inline;

;; $ToncastDAOepoch$_load
(slice, ((slice, int, int, int, int))) $ToncastDAOepoch$_load(slice sc_0) inline;

;; $Context$_get_value
_ $Context$_get_value((int, slice, int, slice) v) inline;

;; $EpochData$_to_external
(int, int, int, int, slice) $EpochData$_to_external(((int, int, int, int, slice)) v) inline;

;; $ToncastDAOepoch$init$_load
(slice, ((slice, int))) $ToncastDAOepoch$init$_load(slice sc_0) inline;

;; $ToncastDAOepoch$_contract_init
(slice, int, int, int, int) $ToncastDAOepoch$_contract_init(slice $owner, int $epochNumber) impure inline;

;; $ToncastDAOepoch$_contract_load
(slice, int, int, int, int) $ToncastDAOepoch$_contract_load() impure inline;

;; $ToncastDAOepoch$_contract_store
() $ToncastDAOepoch$_contract_store((slice, int, int, int, int) v) impure inline;

;; $String$_fun_asComment
cell $String$_fun_asComment(slice $self) impure inline_ref;

;; $EpochData$_constructor_epochNumber_totalTonReceived_totalToncastStaked_isInitialized_owner
((int, int, int, int, slice)) $EpochData$_constructor_epochNumber_totalTonReceived_totalToncastStaked_isInitialized_owner(int $epochNumber, int $totalTonReceived, int $totalToncastStaked, int $isInitialized, slice $owner) inline;

;; $ToncastDAOepoch$_fun_getEpochData
((slice, int, int, int, int), (int, int, int, int, slice)) $ToncastDAOepoch$_fun_getEpochData((slice, int, int, int, int) $self) impure inline_ref;

;; $ToncastDAOepoch$_fun_calculateStakerReward
((slice, int, int, int, int), int) $ToncastDAOepoch$_fun_calculateStakerReward((slice, int, int, int, int) $self, int $stakerToncastAmount) impure inline_ref;

;; $ToncastDAOepoch$_fun_requireOwner
((slice, int, int, int, int), ()) $ToncastDAOepoch$_fun_requireOwner((slice, int, int, int, int) $self) impure inline_ref;

;; $ToncastDAOepoch$_fun_owner
((slice, int, int, int, int), slice) $ToncastDAOepoch$_fun_owner((slice, int, int, int, int) $self) impure inline_ref;

;; $MessageParameters$_constructor_to_value_mode_body
((int, cell, int, slice, int)) $MessageParameters$_constructor_to_value_mode_body(slice $to, int $value, int $mode, cell $body) inline;


;; ToncastDAOepoch_ToncastDAOepoch.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

(int, slice, int, slice) __tact_context_get() inline {
    return __tact_context;
}

slice __tact_context_get_sender() inline {
    return __tact_context_sender;
}

tuple __tact_string_builder_start(builder b) inline {
    return tpush(tpush(empty_tuple(), b), null());
}

tuple __tact_string_builder_start_comment() inline {
    return __tact_string_builder_start(begin_cell().store_uint(0, 32));
}

tuple __tact_string_builder_start_string() inline {
    return __tact_string_builder_start(begin_cell());
}

cell __tact_string_builder_end(tuple builders) inline {
    (builder b, tuple tail) = uncons(builders);
    cell c = b.end_cell();
    while(~ null?(tail)) {
        (b, tail) = uncons(tail);
        c = b.store_ref(c).end_cell();
    }
    return c;
}

slice __tact_string_builder_end_slice(tuple builders) inline {
    return __tact_string_builder_end(builders).begin_parse();
}

((tuple), ()) __tact_string_builder_append(tuple builders, slice sc) inline_ref {
    int sliceRefs = slice_refs(sc);
    int sliceBits = slice_bits(sc);

    while((sliceBits > 0) | (sliceRefs > 0)) {

        ;; Load the current builder
        (builder b, tuple tail) = uncons(builders);
        int remBytes = 127 - (builder_bits(b) / 8);
        int exBytes = sliceBits / 8;

        ;; Append bits
        int amount = min(remBytes, exBytes);
        if (amount > 0) {
            slice read = sc~load_bits(amount * 8);
            b = b.store_slice(read);
        }

        ;; Update builders
        builders = cons(b, tail);

        ;; Check if we need to add a new cell and continue
        if (exBytes - amount > 0) {
            var bb = begin_cell();
            builders = cons(bb, builders);
            sliceBits = (exBytes - amount) * 8;
        } elseif (sliceRefs > 0) {
            sc = sc~load_ref().begin_parse();
            sliceRefs = slice_refs(sc);
            sliceBits = slice_bits(sc);
        } else {
            sliceBits = 0;
            sliceRefs = 0;
        }
    }

    return ((builders), ());
}

int $global_myBalance() impure asm """
    BALANCE FIRST
""";

() $global_message((int, cell, int, slice, int) $params) impure asm """
    NEWC
    b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
    1 STI               // store `bounce`
    b{000} STSLICECONST // store bounced = false and src = addr_none
    STSLICE             // store `to`
    SWAP
    STGRAMS             // store `value`
    106 PUSHINT         // 1 + 4 + 4 + 64 + 32 + 1
    STZEROES
    // â†’ Stack state
    // s0: Builder
    // s1: `body`
    // s2: `mode`
    STDICT
    ENDC
    SWAP
    SENDRAWMSG
""";

slice $Int$_fun_toString(int $self) impure asm """
    <{
        // x
        NEWC // x b
        OVER // x b x
        0 LESSINT // x b <0?
        <{
            // x b
            45 PUSHINT // x b 45
            SWAP // x 45 b
            8 STU // x b
            SWAP // b x
            NEGATE // b -x
            SWAP // -x b
        }>CONT IF
        // x b

        SWAP // b x

        <{
            // b x
            10 PUSHINT DIVMOD // b x/10 x%10
            48 ADDCONST // b x/10 (x%10+48)
            s2 s2 s0 XC2PU ISZERO // (x%10+48) b x/10 x/10==0?
        }>CONT UNTIL
        // ... b x

        DROP // ... b
        DEPTH DEC // ... b n
        <{ 8 STU }>CONT REPEAT // b
    }>CONT 1 1 CALLXARGS
    // b

    ENDC CTOS // s
""";

cell $String$_fun_asComment(slice $self) impure inline_ref {
    var ($self) = $self;
    tuple $b = __tact_string_builder_start_comment();
    $b~__tact_string_builder_append($self);
    return __tact_string_builder_end($b);
}

((slice, int, int, int, int), ()) $ToncastDAOepoch$_fun_requireOwner((slice, int, int, int, int) $self) impure inline_ref {
    var (($self'owner, $self'epochNumber, $self'totalTonReceived, $self'totalToncastStaked, $self'isInitialized)) = $self;
    throw_unless(132, ( equal_slices_bits(__tact_context_get_sender(), $self'owner) ));
    return (($self'owner, $self'epochNumber, $self'totalTonReceived, $self'totalToncastStaked, $self'isInitialized), ());
}

((slice, int, int, int, int), slice) $ToncastDAOepoch$_fun_owner((slice, int, int, int, int) $self) impure inline_ref {
    var (($self'owner, $self'epochNumber, $self'totalTonReceived, $self'totalToncastStaked, $self'isInitialized)) = $self;
    var $fresh$ret_28 = $self'owner;
    return (($self'owner, $self'epochNumber, $self'totalTonReceived, $self'totalToncastStaked, $self'isInitialized), $fresh$ret_28);
}

;; ToncastDAOepoch_ToncastDAOepoch.constants.fc
;; String "Epoch #"
slice __gen_slice_string_243f74d3c5afd6bf86b3c00ea8bb70d9c0ef0f7b6d15211e17ea9aea07c70844() asm """
    B{b5ee9c7241010101000900000e45706f63682023d3f7d9df} B>boc <s PUSHSLICE
""";

;; String " reward"
slice __gen_slice_string_ed01ec9c5e93cb8fd45d9bda4acdc5189e4d510d48aa153bec26ca15c30b39a1() asm """
    B{b5ee9c7241010101000900000e207265776172644ebc6f46} B>boc <s PUSHSLICE
""";

;; ToncastDAOepoch_ToncastDAOepoch.storage.fc
;;
;; Type: Context
;; TLB: _ bounceable:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_value((int, slice, int, slice) v) inline {
    var (v'bounceable, v'sender, v'value, v'raw) = v;
    return v'value;
}

;;
;; Type: MessageParameters
;; TLB: _ mode:int257 body:Maybe ^cell value:int257 to:address bounce:bool = MessageParameters
;;

((int, cell, int, slice, int)) $MessageParameters$_constructor_to_value_mode_body(slice $to, int $value, int $mode, cell $body) inline {
    return ($mode, $body, $value, $to, true);
}

;;
;; Type: EpochData
;; TLB: _ epochNumber:uint32 totalTonReceived:coins totalToncastStaked:coins isInitialized:bool owner:address = EpochData
;;

(int, int, int, int, slice) $EpochData$_to_external(((int, int, int, int, slice)) v) inline {
    var (v'epochNumber, v'totalTonReceived, v'totalToncastStaked, v'isInitialized, v'owner) = v; 
    return (v'epochNumber, v'totalTonReceived, v'totalToncastStaked, v'isInitialized, v'owner);
}

((int, int, int, int, slice)) $EpochData$_constructor_epochNumber_totalTonReceived_totalToncastStaked_isInitialized_owner(int $epochNumber, int $totalTonReceived, int $totalToncastStaked, int $isInitialized, slice $owner) inline {
    return ($epochNumber, $totalTonReceived, $totalToncastStaked, $isInitialized, $owner);
}

;;
;; Type: ToncastDAOepoch
;; TLB: _ owner:address epochNumber:uint32 totalTonReceived:coins totalToncastStaked:coins isInitialized:bool = ToncastDAOepoch
;;

builder $ToncastDAOepoch$_store(builder build_0, (slice, int, int, int, int) v) inline {
    var (v'owner, v'epochNumber, v'totalTonReceived, v'totalToncastStaked, v'isInitialized) = v;
    build_0 = build_0.store_slice(v'owner);
    build_0 = build_0.store_uint(v'epochNumber, 32);
    build_0 = build_0.store_varuint16(v'totalTonReceived);
    build_0 = build_0.store_varuint16(v'totalToncastStaked);
    build_0 = build_0.store_int(v'isInitialized, 1);
    return build_0;
}

(slice, ((slice, int, int, int, int))) $ToncastDAOepoch$_load(slice sc_0) inline {
    var v'owner = sc_0~load_msg_addr();
    var v'epochNumber = sc_0~load_uint(32);
    var v'totalTonReceived = sc_0~load_varuint16();
    var v'totalToncastStaked = sc_0~load_varuint16();
    var v'isInitialized = sc_0~load_int(1);
    return (sc_0, (v'owner, v'epochNumber, v'totalTonReceived, v'totalToncastStaked, v'isInitialized));
}

(slice, ((slice, int))) $ToncastDAOepoch$init$_load(slice sc_0) inline {
    var v'owner = sc_0~load_msg_addr();
    var v'epochNumber = sc_0~load_int(257);
    return (sc_0, (v'owner, v'epochNumber));
}

(slice, int, int, int, int) $ToncastDAOepoch$_contract_load() impure inline {
    slice $sc = get_data().begin_parse();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$ToncastDAOepoch$_load();
    }
    else {
        (slice $owner, int $epochNumber) = $sc~$ToncastDAOepoch$init$_load();
        $sc.end_parse();
        return $ToncastDAOepoch$_contract_init($owner, $epochNumber);
    }
}

() $ToncastDAOepoch$_contract_store((slice, int, int, int, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_int(true, 1);
    b = $ToncastDAOepoch$_store(b, v);
    set_data(b.end_cell());
}

;;
;; Contract ToncastDAOepoch functions
;;

(slice, int, int, int, int) $ToncastDAOepoch$_contract_init(slice $owner, int $epochNumber) impure inline {
    var (($self'owner, $self'epochNumber, $self'totalTonReceived, $self'totalToncastStaked, $self'isInitialized)) = (null(), null(), null(), null(), null());
    $self'owner = $owner;
    $self'epochNumber = $epochNumber;
    $self'totalTonReceived = 0;
    $self'totalToncastStaked = 0;
    $self'isInitialized = false;
    return ($self'owner, $self'epochNumber, $self'totalTonReceived, $self'totalToncastStaked, $self'isInitialized);
}

((slice, int, int, int, int), (int, int, int, int, slice)) $ToncastDAOepoch$_fun_getEpochData((slice, int, int, int, int) $self) impure inline_ref {
    var (($self'owner, $self'epochNumber, $self'totalTonReceived, $self'totalToncastStaked, $self'isInitialized)) = $self;
    var $fresh$ret_24 = $EpochData$_constructor_epochNumber_totalTonReceived_totalToncastStaked_isInitialized_owner($self'epochNumber, $self'totalTonReceived, $self'totalToncastStaked, $self'isInitialized, $self'owner);
    return (($self'owner, $self'epochNumber, $self'totalTonReceived, $self'totalToncastStaked, $self'isInitialized), $fresh$ret_24);
}

((slice, int, int, int, int), int) $ToncastDAOepoch$_fun_calculateStakerReward((slice, int, int, int, int) $self, int $stakerToncastAmount) impure inline_ref {
    var (($self'owner, $self'epochNumber, $self'totalTonReceived, $self'totalToncastStaked, $self'isInitialized)) = $self;
    if (( (( ((~ $self'isInitialized)) ? (true) : (($self'totalToncastStaked == 0)) )) ? (true) : (($stakerToncastAmount <= 0)) )) {
        var $fresh$ret_25 = 0;
        return (($self'owner, $self'epochNumber, $self'totalTonReceived, $self'totalToncastStaked, $self'isInitialized), $fresh$ret_25);
    }
    int $reward = (($stakerToncastAmount * $self'totalTonReceived) / $self'totalToncastStaked);
    if (($reward < 5000000)) {
        var $fresh$ret_26 = 0;
        return (($self'owner, $self'epochNumber, $self'totalTonReceived, $self'totalToncastStaked, $self'isInitialized), $fresh$ret_26);
    }
    var $fresh$ret_27 = $reward;
    return (($self'owner, $self'epochNumber, $self'totalTonReceived, $self'totalToncastStaked, $self'isInitialized), $fresh$ret_27);
}

;;
;; Get methods of a Contract ToncastDAOepoch
;;

_ %getEpochData() method_id(79217) {
    var self = $ToncastDAOepoch$_contract_load();
    var res = self~$ToncastDAOepoch$_fun_getEpochData();
    return $EpochData$_to_external(res);
}

_ %calculateStakerReward(int $stakerToncastAmount) method_id(90295) {
    int $stakerToncastAmount = $stakerToncastAmount;
    var self = $ToncastDAOepoch$_contract_load();
    var res = self~$ToncastDAOepoch$_fun_calculateStakerReward($stakerToncastAmount);
    return res;
}

_ %owner() method_id(83229) {
    var self = $ToncastDAOepoch$_contract_load();
    var res = self~$ToncastDAOepoch$_fun_owner();
    return res;
}

;;
;; Routing of a Contract ToncastDAOepoch
;;

;; message opcode reader utility: binary receivers and empty fallback receiver
;; Returns 32 bit message opcode, or returns immediately if the message is shorter than 32 bits
(slice, int) ~load_opcode_internal(slice s) asm( -> 1 0) "32 LDUQ IFNOTRET";

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var ($self'owner, $self'epochNumber, $self'totalTonReceived, $self'totalToncastStaked, $self'isInitialized) = $ToncastDAOepoch$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) { return (); }
    var op = in_msg~load_opcode_internal();
    ;; Receive DeployEpoch message
    if (op == 0x5a75ae3e) {
        var $msg'totalToncastStaked = in_msg~load_varuint16();
        ($self'owner, $self'epochNumber, $self'totalTonReceived, $self'totalToncastStaked, $self'isInitialized)~$ToncastDAOepoch$_fun_requireOwner();
        throw_unless(508, (~ $self'isInitialized));
        throw_unless(501, ($msg'totalToncastStaked > 0));
        throw_unless(506, ($Context$_get_value(__tact_context_get()) >= 50000000));
        $self'totalTonReceived = ($Context$_get_value(__tact_context_get()) - 50000000);
        $self'totalToncastStaked = $msg'totalToncastStaked;
        $self'isInitialized = true;
        $ToncastDAOepoch$_contract_store(($self'owner, $self'epochNumber, $self'totalTonReceived, $self'totalToncastStaked, $self'isInitialized));
        return ();
    }
    
    ;; Receive PayoutStaker message
    if (op == 0x3a9b4f22) {
        var $msg'queryId = in_msg~load_uint(64);
        var $msg'stakerAddress = in_msg~load_msg_addr();
        var $msg'stakerToncastAmount = in_msg~load_varuint16();
        ($self'owner, $self'epochNumber, $self'totalTonReceived, $self'totalToncastStaked, $self'isInitialized)~$ToncastDAOepoch$_fun_requireOwner();
        throw_unless(500, $self'isInitialized);
        throw_unless(502, ($msg'stakerToncastAmount > 0));
        throw_unless(503, ($msg'stakerToncastAmount <= $self'totalToncastStaked));
        throw_unless(505, ($self'totalToncastStaked > 0));
        int $stakerShare = (($msg'stakerToncastAmount * $self'totalTonReceived) / $self'totalToncastStaked);
        throw_unless(504, ($stakerShare >= 5000000));
        tuple $comment = __tact_string_builder_start_string();
        $comment~__tact_string_builder_append(__gen_slice_string_243f74d3c5afd6bf86b3c00ea8bb70d9c0ef0f7b6d15211e17ea9aea07c70844());
        $comment~__tact_string_builder_append($Int$_fun_toString($self'epochNumber));
        $comment~__tact_string_builder_append(__gen_slice_string_ed01ec9c5e93cb8fd45d9bda4acdc5189e4d510d48aa153bec26ca15c30b39a1());
        if (($global_myBalance() > ($stakerShare + 5000000))) {
            $global_message($MessageParameters$_constructor_to_value_mode_body($msg'stakerAddress, $stakerShare, 66, $String$_fun_asComment(__tact_string_builder_end_slice($comment))));
        } else {
            $global_message($MessageParameters$_constructor_to_value_mode_body($msg'stakerAddress, 0, 160, $String$_fun_asComment(__tact_string_builder_end_slice($comment))));
        }
        $ToncastDAOepoch$_contract_store(($self'owner, $self'epochNumber, $self'totalTonReceived, $self'totalToncastStaked, $self'isInitialized));
        return ();
    }
    
    $ToncastDAOepoch$_contract_store(($self'owner, $self'epochNumber, $self'totalTonReceived, $self'totalToncastStaked, $self'isInitialized));
}


() __tact_selector_hack_asm() impure asm """
@atend @ 1 {
        execute current@ context@ current!
        {
            // The core idea of this function is to save gas by avoiding unnecessary dict jump, when recv_internal/recv_external is called
            // We want to extract recv_internal/recv_external from the dict and select needed function
            // not by jumping to the needed function by it's index, but by using usual IF statements.

            }END> b> // Close previous builder, now we have a cell of previous code on top of the stack

            <{ // Start of the new code builder
                SETCP0
                // Swap the new code builder with the previous code, now we have previous code on top of the stack
                swap
                // Transform cell to slice and load first ref from the previous code, now we have the dict on top of the stack
                <s ref@

                // Extract the recv_internal from the dict
                dup 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot
                swap

                // Delete the recv_internal from the dict
                0 swap @procdictkeylen idict- drop
                // Delete the recv_external from the dict (it's okay if it's not there)
                -1 swap @procdictkeylen idict- drop
                // Delete the __tact_selector_hack from the dict
                65535 swap @procdictkeylen idict- drop

                // Bring the code builder from the bottom of the stack
                // because if recv_external extraction is optional, and the number of elements on the stack is not fixed
                depth 1- roll
                // Swap with the dict from which we extracted recv_internal and (maybe) recv_external
                swap

                // Check if the dict is empty
                dup null?
                // Store a copy of this flag in the bottom of the stack
                dup depth 1- -roll
                {
                    // If the dict is empty, just drop it (it will be null if it's empty)
                    drop
                }
                {
                    // If the dict is not empty, prepare continuation to be stored in c3
                    <{
                        // Save this dict as first ref in this continuation, it will be pushed in runtime by DICTPUSHCONST
                        swap @procdictkeylen DICTPUSHCONST
                        // Jump to the needed function by it's index
                        DICTIGETJMPZ
                        // If such key is not found, throw 11 along with the key as an argument
                        11 THROWARG
                    }> PUSHCONT
                    // Store the continuation in c3
                    c3 POP
                } cond

                // Function id is on top of the (runtime) stack
                DUP IFNOTJMP:<{
                    // place recv_internal here
                    DROP swap @addop
                }>

                // Bring back the flag, indicating if the dict is empty or not from the bottom of the stack
                depth 1- roll
                {
                    // If the dict is empty, throw 11
                    11 THROWARG
                }
                {
                    // If the dict is not empty, jump to continuation from c3
                    c3 PUSH JMPX
                } cond
            }> b>
        } : }END>c
        current@ context! current!
    } does @atend !
""";

() __tact_selector_hack() method_id(65535) {
    return __tact_selector_hack_asm();
}